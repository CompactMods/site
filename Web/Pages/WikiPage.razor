@page "/wiki/{project}/{route?}"
@using Markdig
@using Markdig.Prism
@using Web.Services

@inject HttpClient Http
@inject ProjectsService Projects

<PageTitle>Wiki</PageTitle>

@if (IsErrored)
{
    <p>There was an error loading this page. Please reload the page to try again, or <a href="/wiki">go back to the wiki root</a>.</p>
    @if (!string.IsNullOrEmpty(CustomError))
    {
        <p><b>Error:</b> @CustomError</p>
    }
}
else
{
    @if (IsLoading)
    {
        <p>Loading page, please wait...</p>
    }
    else
    {
        <div class="wiki-page">
            <nav class="wiki-nav">
                <ul>
                    @foreach (var p in ProjectPages.OrderBy(x => x.Slug))
                    {
                        <li><a href="/wiki/@Project/@p.Slug">@PrettyPageTitle(p)</a></li>
                    }
                </ul>
            </nav>

            <main class="wiki-main">
                @if (mdSource != null)
                {
                    <Web.Components.Markdown Content="@mdSource" />
                }
                else
                {
                    <p>Route not found; please check the URL and try again, or <a href="/wiki">go back to the wiki root</a>.</p>
                }
            </main>
        </div>
    }
}

@code {
    [Parameter]
    public string? Project { get; set; }

    [Parameter]
    public string? Route { get; set; }

    public ICollection<ProjectsService.WikiPage> ProjectPages { get; set; } = Array.Empty<ProjectsService.WikiPage>();

    public string? mdSource;

    public bool IsErrored = false;
    public bool IsLoading = true;
    public string? CustomError;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(Route))
            Route = "home";

        if (string.IsNullOrEmpty(Project))
        {
            IsErrored = true;
            IsLoading = false;
            CustomError = "No project found.";
            return;
        }

        var projList = await Projects.GetProjectSlugs();
        if (!projList.Contains(Project, StringComparer.InvariantCultureIgnoreCase))
        {
            IsErrored = true;
            IsLoading = false;
            CustomError = $"No project with the slug '{Project}' was found. Check the URL and try again.";
            return;
        }

        if (!string.IsNullOrEmpty(Project) && !string.IsNullOrEmpty(Route))
        {
            this.ProjectPages = await Projects.GetPagesForProject(Project.ToLower());
            if (ProjectPages.Count == 0)
            {
                IsErrored = true;
                CustomError = "Requested page not found.";
            }
            else
            {
                var source = ProjectPages.Where(x => x.Slug.Equals(Route, StringComparison.InvariantCultureIgnoreCase)).ToArray();
                if (source.Length == 0)
                {
                    IsErrored = true;
                    CustomError = "Requested page not found.";
                }
                else
                {
                    var sourceStr = await Http.GetAsync($"wiki-pages/{Project}/{source[0].Original}");
                    if (sourceStr.IsSuccessStatusCode)
                    {
                        var pl = new Markdig.MarkdownPipelineBuilder()
                            .UseAdvancedExtensions()
                            .UsePrism()
                            .Build();

                        var mdSourceStr = await sourceStr.Content.ReadAsStringAsync();
                        mdSource = Markdig.Markdown.ToHtml(mdSourceStr, pl);
                    }
                }
            }

            IsLoading = false;
        }
        else
        {
            IsErrored = true;
            IsLoading = false;
        }
    }

    public string PrettyPageTitle(ProjectsService.WikiPage page)
    {
        var or = page.Original;
        return or.Replace('-', ' ').Substring(0, or.Length - 3);
    }
}
